# Copyright (c) 2010 Aldo Cortesi
# Copyright (c) 2010, 2014 dequis
# Copyright (c) 2012 Randall Ma
# Copyright (c) 2012-2014 Tycho Andersen
# Copyright (c) 2012 Craig Barnes
# Copyright (c) 2013 horsik
# Copyright (c) 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# SCREEN_SIZE=3440x1440 ./scripts/xephyr -c ~/.config/qtile/dev_config.py

from libqtile.config import Key, Screen, Group, Drag, Click, EzKey, Match
from libqtile.lazy import lazy
from libqtile import layout, bar, widget, hook

from typing import List  # noqa: F401

import os
import subprocess

# COLORS
BEIGE = "#220932"  # 201f23"#100c18"#fff5d8"
RED = "#5c4788"  # ff5e6c"
YELLOW = "#efafce"  # d58a4d"#feb301"
PINK = "#efafce"  # ffaaab"
INACTIVE = "#ad8fe5"
LIGHT_BG = "#695988"
DARK_TEXT = "#000000"
LIGHT_TEXT = "#ffffff"

mod = "mod4"

# why doesnt a variable work?
class kbd:
    layout = "us"


k = kbd()


@lazy.function
def set_kbd_lo(qtile):
    if k.layout == "us":
        subprocess.run(["setxkbmap", "no"])
        k.layout = "no"
    else:
        subprocess.run(["setxkbmap", "us"])
        k.layout = "us"


keys = [
    Key([mod], "j", lazy.layout.down()),
    Key([mod], "k", lazy.layout.up()),
    Key([mod], "h", lazy.layout.left()),
    Key([mod], "l", lazy.layout.right()),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down()),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up()),
    Key([mod, "shift"], "h", lazy.layout.shuffle_left()),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right()),
    Key([mod, "shift"], "u", lazy.layout.flip_down()),
    Key([mod, "shift"], "i", lazy.layout.flip_up()),
    Key([mod, "shift"], "y", lazy.layout.flip_left()),
    Key([mod, "shift"], "o", lazy.layout.flip_right()),
    Key([mod, "control"], "j", lazy.layout.grow_down()),
    Key([mod, "control"], "k", lazy.layout.grow_up()),
    Key([mod, "control"], "h", lazy.layout.grow_left()),
    Key([mod, "control"], "l", lazy.layout.grow_right()),
    Key([mod, "shift"], "n", lazy.layout.normalize()),
    Key([mod, "shift"], "Return", lazy.layout.toggle_split()),
    Key([mod], "Return", lazy.spawn("alacritty")),
    Key([mod], "Tab", lazy.next_layout()),
    Key([mod], "w", lazy.window.kill()),
    Key([mod, "control"], "r", lazy.restart()),
    Key([mod, "control"], "q", lazy.shutdown()),
    Key([mod], "p", lazy.spawn("rofi -show run")),
    EzKey("M-S-l", set_kbd_lo),
]

groups = [Group(i) for i in "1234567890"]

for i in groups:
    keys.extend(
        [
            # mod1 + letter of group = switch to group
            Key([mod], i.name, lazy.group[i.name].toscreen()),
            # mod1 + shift + letter of group = switch to & move focused window to group
            Key([mod, "shift"], i.name, lazy.window.togroup(i.name, switch_group=True)),
            # Or, use below if you prefer not to switch to that group.
            # # mod1 + shift + letter of group = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name)),
        ]
    )

layout_theme = {
    "border_width": 2,
    "margin": 10,
    "border_focus": RED,
    "border_normal": BEIGE,
}

matrix_theme = {
    "border_width": 1,
    "margin": 2,
    "border_focus": RED,
    "border_normal": BEIGE,
}

groups[9].layouts = [
    layout.Matrix(columns=3, **matrix_theme),
    layout.Max(**matrix_theme),
]
groups[9].label = "serv"

layouts = [
    layout.Bsp(**layout_theme),
    # layout.MonadTall(**layout_theme),
    layout.Max(**layout_theme),
    # layout.Stack(num_stacks=3),
    # Try more layouts by unleashing below layouts.
    # layout.Columns(),
    # layout.Matrix(columns=3, **layout_theme),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(shift_window=True, **layout_theme),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]


widget_defaults = dict(font="Source Code Pro", fontsize=14, padding=2,)
extension_defaults = widget_defaults.copy()
# cherry = "üå∏"
# white_flower = "üíÆ"
# onigiri = "üçô"
# Cooked rice: üçö
separator_emoji = "üíÆ"


def base_widgets():
    return [
        widget.CurrentLayoutIcon(background=LIGHT_BG),
        widget.GroupBox(
            background=RED,
            active=PINK,
            inactive=INACTIVE,
            block_highlight_text_color=PINK,
            disable_drag=True,
            highlight_color=[RED, YELLOW],
            highlight_method="line",
            other_current_screen_border=YELLOW,
            other_screen_border=YELLOW,
            this_current_screen_border=PINK,
            this_screen_border=PINK,
            urgent_alert_method="text",
            urgent_text=YELLOW,
        ),
        widget.WindowName(foreground=RED),
        widget.Cmus(
            background=LIGHT_BG,
            play_color=PINK,
            noplay_color=INACTIVE,
            max_chars=50,
            fmt="[{}]",
        ),
        # widget.TextBox(text=separator_emoji, font="Noto Color Emoji", background=RED),
        widget.CPU(background=RED, foreground=PINK, format="[cpu: {load_percent}% "),
        widget.ThermalSensor(
            background=RED, foreground=PINK, tag_sensor="Package id 0", fmt="{}]"
        ),  # add tag_sensor="Package id 0"
        widget.Memory(background=LIGHT_BG, foreground=PINK, format="[ram: {MemUsed}M]"),
        # widget.TextBox(text=separator_emoji, font="Noto Color Emoji", background=LIGHT_BG),
        # widget.TextBox(text=separator_emoji, font="Noto Color Emoji", background=RED),
        widget.DF(
            background=RED,
            foreground=PINK,
            visible_on_warn=False,
            format="[hdd: {f}/{s}{m}]",
        ),
        # widget.TextBox(text=separator_emoji, font="Noto Color Emoji", background=LIGHT_BG),
        widget.Wlan(
            background=LIGHT_BG,
            foreground=PINK,
            interface="wlan0",
            format="{percent:2.0%}",
            fmt="[con: {}]",
        ),
        # widget.TextBox(text=separator_emoji, font="Noto Color Emoji", background=RED),
        widget.Clock(background=RED, foreground=PINK, format="%H:%M", fmt="[{}]",),
        # widget.TextBox(text=separator_emoji, font="Noto Color Emoji", background=LIGHT_BG),
    ]


laptop_widgets = base_widgets()
laptop_widgets.extend(
    (
        widget.Battery(background=LIGHT_BG, foreground=PINK),
        widget.Systray(background=RED),
    )
)

screens = [
    Screen(top=bar.Bar(laptop_widgets, 25, opacity=0.9, background=BEIGE)),
    Screen(top=bar.Bar(base_widgets(), 25, opacity=0.9, background=BEIGE)),
]

# Drag floating layouts.
mouse = [
    Drag(
        [mod],
        "Button1",
        lazy.window.set_position_floating(),
        start=lazy.window.get_position(),
    ),
    Drag(
        [mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()
    ),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: List
main = None
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        {"wmclass": "confirm"},
        {"wmclass": "dialog"},
        {"wmclass": "download"},
        {"wmclass": "error"},
        {"wmclass": "file_progress"},
        {"wmclass": "notification"},
        {"wmclass": "splash"},
        {"wmclass": "toolbar"},
        {"wmclass": "confirmreset"},  # gitk
        {"wmclass": "makebranch"},  # gitk
        {"wmclass": "maketag"},  # gitk
        {"wname": "branchdialog"},  # gitk
        {"wname": "pinentry"},  # GPG key password entry
        {"wmclass": "ssh-askpass"},  # ssh-askpass
        {"wmclass": "ableton live 10 lite.exe"},  # ssh-askpass
        {"wname": "Input"},
    ],
    no_reposition_match=Match(title=["Input"]),
)
auto_fullscreen = True
focus_on_window_activation = "smart"


@hook.subscribe.startup_once
def start_once():
    home = os.path.expanduser("~")
    subprocess.call([home + "/.config/qtile/autostart.sh"])


# @hook.subscribe.client_new
# def float_keepass(window):
#     if window.window.get_name() == "KeePass":
#         window.floating = True


# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
# # We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
